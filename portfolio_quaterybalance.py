import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from pypfopt import EfficientFrontier, risk_models, expected_returns
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (14, 8)
plt.rcParams['font.size'] = 10

class QuarterlyFundPortfolio:
    def __init__(self):
        """
        ·ª®ng d·ª•ng ph√¢n b·ªï ƒë·∫ßu t∆∞ qu·ªπ theo qu√Ω cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
        """
        self.df = None
        self.quarterly_results = {}
        self.current_quarter = self.get_current_quarter()
        
        # Danh s√°ch qu·ªπ m·∫´u (ETF v√† Bond funds ph·ªï bi·∫øn t·∫°i VN/ch√¢u √Å)
        self.sample_funds = {
            'üåè Qu·ªπ ETF Vi·ªát Nam': {
                'E1VFVN30.VN': 'VN30 ETF (Top 30 CP VN)',
                'FUEVFVND.VN': 'DCVFM VN Diamond ETF',
                'FUESSVFL.VN': 'SSIAM VN ETF',
            },
            'üåé Qu·ªπ ETF Qu·ªëc t·∫ø': {
                'SPY': 'SPDR S&P 500 ETF (M·ªπ)',
                'QQQ': 'Invesco QQQ ETF (Tech M·ªπ)',
                'VTI': 'Vanguard Total Stock Market',
                'EEM': 'iShares MSCI Emerging Markets',
                'VEA': 'Vanguard Developed Markets',
                'VXUS': 'Vanguard Total International Stock',
            },
            'üìä Qu·ªπ Tr√°i phi·∫øu': {
                'BND': 'Vanguard Total Bond Market',
                'AGG': 'iShares Core US Aggregate Bond',
                'TLT': 'iShares 20+ Year Treasury Bond',
                'LQD': 'iShares iBoxx Investment Grade',
                'HYG': 'iShares iBoxx High Yield Corporate',
            },
            'üõ°Ô∏è Qu·ªπ C√¢n b·∫±ng': {
                'AOR': 'iShares Core Growth Allocation (60/40)',
                'AOK': 'iShares Core Conservative Allocation (30/70)',
                'AOM': 'iShares Core Moderate Allocation (40/60)',
            },
            'üí∞ Qu·ªπ V√†ng & H√†ng h√≥a': {
                'GLD': 'SPDR Gold Shares',
                'IAU': 'iShares Gold Trust',
                'DBC': 'Invesco DB Commodity Index',
            }
        }
        
        self.risk_profiles = {
            'B·∫£o th·ªß': {
                'description': '∆Øu ti√™n b·∫£o to√†n v·ªën, ch·∫•p nh·∫≠n l·ª£i nhu·∫≠n th·∫•p',
                'stocks': 20, 'bonds': 70, 'others': 10,
                'max_volatility': 0.10
            },
            'Trung b√¨nh': {
                'description': 'C√¢n b·∫±ng gi·ªØa r·ªßi ro v√† l·ª£i nhu·∫≠n',
                'stocks': 50, 'bonds': 40, 'others': 10,
                'max_volatility': 0.15
            },
            'T√≠ch c·ª±c': {
                'description': 'Ch·∫•p nh·∫≠n r·ªßi ro cao ƒë·ªÉ ƒë·∫°t l·ª£i nhu·∫≠n cao',
                'stocks': 70, 'bonds': 20, 'others': 10,
                'max_volatility': 0.25
            },
            'R·∫•t t√≠ch c·ª±c': {
                'description': 'T·∫≠p trung v√†o tƒÉng tr∆∞·ªüng, r·ªßi ro r·∫•t cao',
                'stocks': 90, 'bonds': 5, 'others': 5,
                'max_volatility': 0.35
            }
        }
        
        self.create_widgets()
        
    def get_current_quarter(self):
        """X√°c ƒë·ªãnh qu√Ω hi·ªán t·∫°i"""
        today = datetime.now()
        quarter = (today.month - 1) // 3 + 1
        return f"Q{quarter}/{today.year}"
    
    def get_quarter_dates(self, year, quarter):
        """L·∫•y ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa qu√Ω"""
        start_month = (quarter - 1) * 3 + 1
        start_date = datetime(year, start_month, 1)
        
        if quarter == 4:
            end_date = datetime(year, 12, 31)
        else:
            end_month = start_month + 3
            end_date = datetime(year, end_month, 1) - timedelta(days=1)
        
        return start_date, end_date
    
    def create_widgets(self):
        """T·∫°o giao di·ªán GUI"""
        
        # Header
        self.header = widgets.HTML(
            value="""
            <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        padding: 30px; border-radius: 15px; margin-bottom: 20px;'>
                <h1 style='color: white; text-align: center; margin: 0;'>
                    üíº PH√ÇN B·ªî ƒê·∫¶U T∆Ø QU·ª∏ THEO QU√ù
                </h1>
                <p style='color: white; text-align: center; font-size: 16px; margin-top: 10px;'>
                    D√†nh cho nh√† ƒë·∫ßu t∆∞ m·ªõi b·∫Øt ƒë·∫ßu | PyPortfolioOpt
                </p>
            </div>
            """
        )
        
        # Tabs
        self.tabs = widgets.Tab()
        
        tab1 = self.create_input_tab()
        tab2 = self.create_analysis_tab()
        tab3 = self.create_quarterly_plan_tab()
        tab4 = self.create_education_tab()
        
        self.tabs.children = [tab1, tab2, tab3, tab4]
        self.tabs.set_title(0, 'üéØ Thi·∫øt L·∫≠p Danh M·ª•c')
        self.tabs.set_title(1, 'üìä Ph√¢n T√≠ch Chi Ti·∫øt')
        self.tabs.set_title(2, 'üìÖ K·∫ø Ho·∫°ch Theo Qu√Ω')
        self.tabs.set_title(3, 'üìö Ki·∫øn Th·ª©c ƒê·∫ßu T∆∞')
        
    def create_input_tab(self):
        """Tab nh·∫≠p li·ªáu"""
        
        # H·ªì s∆° r·ªßi ro
        self.risk_profile = widgets.Dropdown(
            options=list(self.risk_profiles.keys()),
            value='Trung b√¨nh',
            description='H·ªì s∆° r·ªßi ro:',
            style={'description_width': '120px'},
            layout=widgets.Layout(width='60%')
        )
        
        risk_info = widgets.HTML()
        
        def update_risk_info(change):
            profile = self.risk_profiles[change['new']]
            risk_info.value = f"""
            <div style='background: #f0f8ff; padding: 15px; border-radius: 10px; margin: 10px 0;'>
                <b>üìã M√¥ t·∫£:</b> {profile['description']}<br>
                <b>üìä Ph√¢n b·ªï ƒë·ªÅ xu·∫•t:</b> C·ªï phi·∫øu {profile['stocks']}% | 
                Tr√°i phi·∫øu {profile['bonds']}% | Kh√°c {profile['others']}%<br>
                <b>‚ö†Ô∏è ƒê·ªô bi·∫øn ƒë·ªông t·ªëi ƒëa:</b> {profile['max_volatility']*100:.0f}%
            </div>
            """
        
        self.risk_profile.observe(update_risk_info, 'value')
        update_risk_info({'new': 'Trung b√¨nh'})
        
        # Ch·ªçn lo·∫°i qu·ªπ
        self.fund_category = widgets.Dropdown(
            options=list(self.sample_funds.keys()),
            description='Lo·∫°i qu·ªπ:',
            style={'description_width': '120px'},
            layout=widgets.Layout(width='60%')
        )
        
        # Danh s√°ch m√£ qu·ªπ
        self.funds_input = widgets.Textarea(
            value='SPY, BND, GLD',
            placeholder='Nh·∫≠p m√£ qu·ªπ, c√°ch nhau b·ªüi d·∫•u ph·∫©y (VD: SPY, BND, GLD)',
            description='M√£ qu·ªπ:',
            layout=widgets.Layout(width='80%', height='120px'),
            style={'description_width': '120px'}
        )
        
        # N√∫t g·ª£i √Ω
        suggest_btn = widgets.Button(
            description='üí° G·ª£i √Ω qu·ªπ',
            button_style='info',
            layout=widgets.Layout(width='150px')
        )
        
        def suggest_funds(b):
            category = self.fund_category.value
            funds = list(self.sample_funds[category].keys())
            self.funds_input.value = ', '.join(funds[:5])
        
        suggest_btn.on_click(suggest_funds)
        
        # Hi·ªÉn th·ªã th√¥ng tin qu·ªπ
        fund_info_btn = widgets.Button(
            description='‚ÑπÔ∏è Xem th√¥ng tin',
            button_style='',
            layout=widgets.Layout(width='150px')
        )
        
        fund_info_output = widgets.Output()
        
        def show_fund_info(b):
            with fund_info_output:
                clear_output()
                category = self.fund_category.value
                print(f"\nüìñ Danh s√°ch qu·ªπ trong '{category}':\n")
                print("-" * 70)
                for code, name in self.sample_funds[category].items():
                    print(f"‚Ä¢ {code:<15} : {name}")
                print("-" * 70)
        
        fund_info_btn.on_click(show_fund_info)
        
        # Kho·∫£ng th·ªùi gian
        self.years_back = widgets.IntSlider(
            value=3,
            min=1,
            max=10,
            step=1,
            description='S·ªë nƒÉm d·ªØ li·ªáu:',
            style={'description_width': '120px'},
            layout=widgets.Layout(width='60%')
        )
        
        # V·ªën ƒë·∫ßu t∆∞
        self.total_capital = widgets.FloatText(
            value=100000000,
            description='T·ªïng v·ªën (VNƒê):',
            step=5000000,
            style={'description_width': '120px'},
            layout=widgets.Layout(width='60%')
        )
        
        self.quarterly_invest = widgets.FloatText(
            value=10000000,
            description='V·ªën m·ªói qu√Ω (VNƒê):',
            step=1000000,
            style={'description_width': '120px'},
            layout=widgets.Layout(width='60%')
        )
        
        # Ph∆∞∆°ng ph√°p t·ªëi ∆∞u
        self.optimization_method = widgets.RadioButtons(
            options=[
                ('Sharpe Ratio t·ªëi ƒëa (T·ªëi ∆∞u l·ª£i nhu·∫≠n/r·ªßi ro)', 'max_sharpe'),
                ('R·ªßi ro t·ªëi thi·ªÉu (·ªîn ƒë·ªãnh nh·∫•t)', 'min_volatility'),
                ('Efficient Risk (C√¢n b·∫±ng, ph√π h·ª£p ng∆∞·ªùi m·ªõi)', 'efficient_risk')
            ],
            value='efficient_risk',
            description='',
            layout=widgets.Layout(width='100%')
        )
        
        # N√∫t ph√¢n t√≠ch
        self.analyze_btn = widgets.Button(
            description='üöÄ Ph√¢n T√≠ch Ngay',
            button_style='success',
            layout=widgets.Layout(width='250px', height='50px'),
            style={'font_weight': 'bold', 'font_size': '14px'}
        )
        self.analyze_btn.on_click(self.run_analysis)
        
        # Output
        self.output = widgets.Output()
        
        # Layout
        input_box = widgets.VBox([
            widgets.HTML("<h2>üéØ THI·∫æT L·∫¨P DANH M·ª§C ƒê·∫¶U T∆Ø</h2>"),
            widgets.HTML("<hr>"),
            
            widgets.HTML("<h3>üë§ 1. X√°c ƒë·ªãnh h·ªì s∆° r·ªßi ro c·ªßa b·∫°n</h3>"),
            self.risk_profile,
            risk_info,
            
            widgets.HTML("<br><h3>üìÇ 2. Ch·ªçn qu·ªπ ƒë·∫ßu t∆∞</h3>"),
            self.fund_category,
            widgets.HBox([suggest_btn, fund_info_btn]),
            fund_info_output,
            self.funds_input,
            
            widgets.HTML("<br><h3>‚è∞ 3. Th·ªùi gian ph√¢n t√≠ch</h3>"),
            self.years_back,
            widgets.HTML("<p style='color: #666; margin-left: 10px;'>"
                        "üí° G·ª£i √Ω: 3-5 nƒÉm ƒë·ªÉ c√≥ ƒë·ªß d·ªØ li·ªáu qua nhi·ªÅu chu k·ª≥ th·ªã tr∆∞·ªùng</p>"),
            
            widgets.HTML("<br><h3>üí∞ 4. V·ªën ƒë·∫ßu t∆∞</h3>"),
            self.total_capital,
            self.quarterly_invest,
            widgets.HTML("<p style='color: #666; margin-left: 10px;'>"
                        "üí° G·ª£i √Ω: V·ªën m·ªói qu√Ω = 1/4 t·ªïng v·ªën h√†ng nƒÉm ho·∫∑c theo kh·∫£ nƒÉng ti·∫øt ki·ªám</p>"),
            
            widgets.HTML("<br><h3>‚öôÔ∏è 5. Ph∆∞∆°ng ph√°p t·ªëi ∆∞u h√≥a</h3>"),
            self.optimization_method,
            
            widgets.HTML("<br>"),
            self.analyze_btn,
            self.output
        ])
        
        return input_box
    
    def create_analysis_tab(self):
        """Tab ph√¢n t√≠ch chi ti·∫øt"""
        self.analysis_output = widgets.Output()
        return self.analysis_output
    
    def create_quarterly_plan_tab(self):
        """Tab k·∫ø ho·∫°ch theo qu√Ω"""
        self.quarterly_output = widgets.Output()
        return self.quarterly_output
    
    def create_education_tab(self):
        """Tab ki·∫øn th·ª©c"""
        education_html = """
        <div style='padding: 20px; line-height: 1.8;'>
            <h2>üìö KI·∫æN TH·ª®C C∆† B·∫¢N V·ªÄ ƒê·∫¶U T∆Ø QU·ª∏</h2>
            
            <div style='background: #e3f2fd; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üéØ 1. Qu·ªπ ƒë·∫ßu t∆∞ l√† g√¨?</h3>
                <p><b>Qu·ªπ ƒë·∫ßu t∆∞</b> l√† m·ªôt c√¥ng c·ª• t√†i ch√≠nh g·ªôp v·ªën t·ª´ nhi·ªÅu nh√† ƒë·∫ßu t∆∞ ƒë·ªÉ ƒë·∫ßu t∆∞ v√†o 
                danh m·ª•c ƒëa d·∫°ng c√°c t√†i s·∫£n (c·ªï phi·∫øu, tr√°i phi·∫øu, h√†ng h√≥a...) do chuy√™n gia qu·∫£n l√Ω.</p>
                
                <p><b>∆Øu ƒëi·ªÉm:</b></p>
                <ul>
                    <li>‚úÖ ƒêa d·∫°ng h√≥a t·ª± ƒë·ªông (gi·∫£m r·ªßi ro)</li>
                    <li>‚úÖ Qu·∫£n l√Ω chuy√™n nghi·ªáp</li>
                    <li>‚úÖ V·ªën ƒë·∫ßu t∆∞ nh·ªè v·∫´n c√≥ th·ªÉ tham gia</li>
                    <li>‚úÖ Thanh kho·∫£n cao (ETF)</li>
                </ul>
            </div>
            
            <div style='background: #fff3e0; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üìä 2. C√°c lo·∫°i qu·ªπ ph·ªï bi·∫øn</h3>
                
                <p><b>üè¢ Qu·ªπ C·ªï phi·∫øu (Equity Funds)</b></p>
                <ul>
                    <li>ƒê·∫ßu t∆∞ ch·ªß y·∫øu v√†o c·ªï phi·∫øu</li>
                    <li>Ti·ªÅm nƒÉng l·ª£i nhu·∫≠n cao, r·ªßi ro cao</li>
                    <li>VD: SPY (S&P 500), VNM ETF</li>
                </ul>
                
                <p><b>üìú Qu·ªπ Tr√°i phi·∫øu (Bond Funds)</b></p>
                <ul>
                    <li>ƒê·∫ßu t∆∞ v√†o tr√°i phi·∫øu ch√≠nh ph·ªß, doanh nghi·ªáp</li>
                    <li>·ªîn ƒë·ªãnh, r·ªßi ro th·∫•p, l·ª£i nhu·∫≠n v·ª´a ph·∫£i</li>
                    <li>VD: BND, AGG</li>
                </ul>
                
                <p><b>üìà ETF (Exchange Traded Fund)</b></p>
                <ul>
                    <li>Giao d·ªãch nh∆∞ c·ªï phi·∫øu tr√™n s√†n</li>
                    <li>Chi ph√≠ th·∫•p, minh b·∫°ch</li>
                    <li>Theo d√µi ch·ªâ s·ªë th·ªã tr∆∞·ªùng</li>
                </ul>
                
                <p><b>‚öñÔ∏è Qu·ªπ C√¢n b·∫±ng (Balanced Funds)</b></p>
                <ul>
                    <li>K·∫øt h·ª£p c·ªï phi·∫øu v√† tr√°i phi·∫øu</li>
                    <li>C√¢n b·∫±ng gi·ªØa tƒÉng tr∆∞·ªüng v√† ·ªïn ƒë·ªãnh</li>
                    <li>VD: AOR (60% c·ªï phi·∫øu, 40% tr√°i phi·∫øu)</li>
                </ul>
            </div>
            
            <div style='background: #f3e5f5; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üí° 3. Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ theo qu√Ω</h3>
                
                <p><b>T·∫°i sao n√™n ƒë·∫ßu t∆∞ ƒë·ªãnh k·ª≥ theo qu√Ω?</b></p>
                <ul>
                    <li>üéØ <b>Dollar Cost Averaging (DCA):</b> Mua ƒë·ªÅu ƒë·∫∑n, gi·∫£m r·ªßi ro th·ªùi ƒëi·ªÉm</li>
                    <li>üìä <b>Rebalancing:</b> ƒêi·ªÅu ch·ªânh danh m·ª•c v·ªÅ t·ª∑ l·ªá m·ª•c ti√™u</li>
                    <li>üí∞ <b>D·ªÖ qu·∫£n l√Ω:</b> Ph√π h·ª£p v·ªõi thu nh·∫≠p ƒë·ªãnh k·ª≥</li>
                    <li>üßò <b>K·ª∑ lu·∫≠t:</b> Tr√°nh quy·∫øt ƒë·ªãnh c·∫£m t√≠nh</li>
                </ul>
                
                <p><b>Quy tr√¨nh m·ªói qu√Ω:</b></p>
                <ol>
                    <li><b>ƒê√°nh gi√° hi·ªáu su·∫•t:</b> Xem l·∫°i l·ª£i nhu·∫≠n qu√Ω tr∆∞·ªõc</li>
                    <li><b>Ph√¢n t√≠ch th·ªã tr∆∞·ªùng:</b> C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi</li>
                    <li><b>T·ªëi ∆∞u danh m·ª•c:</b> Ch·∫°y PyPortfolioOpt</li>
                    <li><b>Rebalancing:</b> ƒêi·ªÅu ch·ªânh theo t·ª∑ tr·ªçng m·ªõi</li>
                    <li><b>ƒê·∫ßu t∆∞ th√™m:</b> B·ªï sung v·ªën theo k·∫ø ho·∫°ch</li>
                </ol>
            </div>
            
            <div style='background: #e8f5e9; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üìà 4. Hi·ªÉu c√°c ch·ªâ s·ªë quan tr·ªçng</h3>
                
                <p><b>Expected Return (L·ª£i nhu·∫≠n k·ª≥ v·ªçng):</b></p>
                <ul>
                    <li>L·ª£i nhu·∫≠n trung b√¨nh d·ª± ki·∫øn h√†ng nƒÉm</li>
                    <li>T√≠nh t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠</li>
                    <li>‚ö†Ô∏è Kh√¥ng ƒë·∫£m b·∫£o hi·ªáu su·∫•t t∆∞∆°ng lai</li>
                </ul>
                
                <p><b>Volatility (ƒê·ªô bi·∫øn ƒë·ªông):</b></p>
                <ul>
                    <li>ƒêo l∆∞·ªùng m·ª©c ƒë·ªô dao ƒë·ªông gi√°</li>
                    <li>Volatility cao = R·ªßi ro cao</li>
                    <li>VD: 15% volatility nghƒ©a l√† gi√° c√≥ th·ªÉ dao ƒë·ªông ¬±15%/nƒÉm</li>
                </ul>
                
                <p><b>Sharpe Ratio (T·ª∑ l·ªá Sharpe):</b></p>
                <ul>
                    <li>C√¥ng th·ª©c: (L·ª£i nhu·∫≠n - L√£i su·∫•t phi r·ªßi ro) / Volatility</li>
                    <li>ƒêo l∆∞·ªùng hi·ªáu qu·∫£ ƒë·∫ßu t∆∞ sau khi ƒëi·ªÅu ch·ªânh r·ªßi ro</li>
                    <li>Sharpe > 1: T·ªët | > 2: R·∫•t t·ªët | > 3: Xu·∫•t s·∫Øc</li>
                </ul>
                
                <p><b>Correlation (T∆∞∆°ng quan):</b></p>
                <ul>
                    <li>ƒêo l∆∞·ªùng m·ªëi quan h·ªá gi·ªØa c√°c t√†i s·∫£n</li>
                    <li>-1 ƒë·∫øn +1: -1 = ng∆∞·ª£c chi·ªÅu, 0 = kh√¥ng li√™n quan, +1 = c√πng chi·ªÅu</li>
                    <li>ƒêa d·∫°ng h√≥a t·ªët: ch·ªçn t√†i s·∫£n c√≥ correlation th·∫•p</li>
                </ul>
            </div>
            
            <div style='background: #ffebee; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>‚ö†Ô∏è 5. R·ªßi ro v√† l∆∞u √Ω quan tr·ªçng</h3>
                
                <p><b>R·ªßi ro th·ªã tr∆∞·ªùng:</b></p>
                <ul>
                    <li>Gi√° qu·ªπ c√≥ th·ªÉ gi·∫£m khi th·ªã tr∆∞·ªùng s·ª•t gi·∫£m</li>
                    <li>Kh√¥ng c√≥ b·∫£o ƒë·∫£m v·ªën g·ªëc</li>
                </ul>
                
                <p><b>Chi ph√≠:</b></p>
                <ul>
                    <li>Ph√≠ qu·∫£n l√Ω (Expense Ratio): 0.03% - 2%/nƒÉm</li>
                    <li>Ph√≠ giao d·ªãch, thu·∫ø</li>
                    <li>ETF th∆∞·ªùng c√≥ ph√≠ th·∫•p h∆°n qu·ªπ m·ªü</li>
                </ul>
                
                <p><b>‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:</b></p>
                <ul>
                    <li>üö´ Kh√¥ng b·ªè h·∫øt tr·ª©ng v√†o m·ªôt gi·ªè - ƒêa d·∫°ng h√≥a!</li>
                    <li>üìö ƒê·∫ßu t∆∞ v√†o nh·ªØng g√¨ b·∫°n hi·ªÉu</li>
                    <li>‚è∞ ƒê·∫ßu t∆∞ d√†i h·∫°n (t·ªëi thi·ªÉu 3-5 nƒÉm)</li>
                    <li>üí∞ Ch·ªâ ƒë·∫ßu t∆∞ s·ªë ti·ªÅn b·∫°n c√≥ th·ªÉ ch·∫•p nh·∫≠n m·∫•t</li>
                    <li>üìä Xem x√©t l·∫°i danh m·ª•c ƒë·ªãnh k·ª≥</li>
                    <li>üßò Kh√¥ng ho·∫£ng lo·∫°n khi th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông</li>
                </ul>
            </div>
            
            <div style='background: #e1f5fe; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üéì 6. L·ªô tr√¨nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu</h3>
                
                <p><b>Giai ƒëo·∫°n 1: H·ªçc h·ªèi (1-3 th√°ng)</b></p>
                <ul>
                    <li>ƒê·ªçc s√°ch, b√†i vi·∫øt v·ªÅ ƒë·∫ßu t∆∞ qu·ªπ</li>
                    <li>Hi·ªÉu c√°c kh√°i ni·ªám c∆° b·∫£n</li>
                    <li>Th·ª≠ nghi·ªám v·ªõi s·ªë ti·ªÅn nh·ªè</li>
                </ul>
                
                <p><b>Giai ƒëo·∫°n 2: Th·ª±c h√†nh (3-6 th√°ng)</b></p>
                <ul>
                    <li>B·∫Øt ƒë·∫ßu v·ªõi danh m·ª•c ƒë∆°n gi·∫£n (2-3 qu·ªπ)</li>
                    <li>ƒê·∫ßu t∆∞ ƒë·ªãnh k·ª≥ h√†ng th√°ng/qu√Ω</li>
                    <li>Theo d√µi v√† h·ªçc t·ª´ k·∫øt qu·∫£</li>
                </ul>
                
                <p><b>Giai ƒëo·∫°n 3: M·ªü r·ªông (6-12 th√°ng)</b></p>
                <ul>
                    <li>TƒÉng s·ªë l∆∞·ª£ng qu·ªπ (5-8 qu·ªπ)</li>
                    <li>ƒêa d·∫°ng h√≥a theo ng√†nh, khu v·ª±c</li>
                    <li>√Åp d·ª•ng rebalancing ƒë·ªãnh k·ª≥</li>
                </ul>
                
                <p><b>Giai ƒëo·∫°n 4: Tinh ch·ªânh (1 nƒÉm+)</b></p>
                <ul>
                    <li>T·ªëi ∆∞u h√≥a d·ª±a tr√™n kinh nghi·ªám</li>
                    <li>ƒêi·ªÅu ch·ªânh theo m·ª•c ti√™u t√†i ch√≠nh</li>
                    <li>C√≥ th·ªÉ th√™m c√°c chi·∫øn l∆∞·ª£c n√¢ng cao</li>
                </ul>
            </div>
            
            <div style='background: #fff9c4; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üíº 7. V√≠ d·ª• danh m·ª•c m·∫´u</h3>
                
                <p><b>Danh m·ª•c B·∫£o th·ªß (20-30 tu·ªïi, √≠t kinh nghi·ªám):</b></p>
                <ul>
                    <li>40% BND (Tr√°i phi·∫øu t·ªïng h·ª£p)</li>
                    <li>30% SPY (C·ªï phi·∫øu M·ªπ)</li>
                    <li>20% VEA (C·ªï phi·∫øu qu·ªëc t·∫ø)</li>
                    <li>10% GLD (V√†ng)</li>
                </ul>
                
                <p><b>Danh m·ª•c C√¢n b·∫±ng (30-50 tu·ªïi, c√≥ kinh nghi·ªám):</b></p>
                <ul>
                    <li>50% SPY (C·ªï phi·∫øu M·ªπ)</li>
                    <li>25% BND (Tr√°i phi·∫øu)</li>
                    <li>15% EEM (Th·ªã tr∆∞·ªùng m·ªõi n·ªïi)</li>
                    <li>10% VNM ETF (Vi·ªát Nam)</li>
                </ul>
                
                <p><b>Danh m·ª•c T√≠ch c·ª±c (tr·∫ª, ch·∫•p nh·∫≠n r·ªßi ro cao):</b></p>
                <ul>
                    <li>40% QQQ (Tech M·ªπ)</li>
                    <li>30% SPY (S&P 500)</li>
                    <li>20% EEM (Th·ªã tr∆∞·ªùng m·ªõi n·ªïi)</li>
                    <li>10% BND (Tr√°i phi·∫øu)</li>
                </ul>
            </div>
            
            <div style='background: #fce4ec; padding: 15px; border-radius: 10px; margin: 15px 0;'>
                <h3>üìû 8. Ngu·ªìn h·ªçc th√™m</h3>
                <ul>
                    <li>üìö S√°ch: "The Intelligent Investor" - Benjamin Graham</li>
                    <li>üìö S√°ch: "A Random Walk Down Wall Street" - Burton Malkiel</li>
                    <li>üåê Website: Investopedia, Morningstar</li>
                    <li>üìä C√¥ng c·ª•: Yahoo Finance, TradingView</li>
                    <li>üéì Kh√≥a h·ªçc: Coursera, edX v·ªÅ ƒë·∫ßu t∆∞</li>
                </ul>
            </div>
            
            <p style='text-align: center; margin-top: 30px; color: #666;'>
                <b>üí° Nh·ªõ r·∫±ng: ƒê·∫ßu t∆∞ l√† m·ªôt h√†nh tr√¨nh d√†i h·∫°n, kh√¥ng ph·∫£i cu·ªôc ƒëua ng·∫Øn h·∫°n!</b>
            </p>
        </div>
        """
        return widgets.HTML(value=education_html)
    
    def run_analysis(self, b):
        """Ch·∫°y ph√¢n t√≠ch v√† t·ªëi ∆∞u h√≥a"""
        with self.output:
            clear_output()
            print("üîÑ ƒêang ph√¢n t√≠ch... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...")
        
        try:
            # L·∫•y danh s√°ch qu·ªπ
            funds = [f.strip().upper() for f in self.funds_input.value.split(',') if f.strip()]
            
            if len(funds) < 2:
                with self.output:
                    clear_output()
                    print("‚ùå Vui l√≤ng nh·∫≠p √≠t nh·∫•t 2 m√£ qu·ªπ ƒë·ªÉ ƒëa d·∫°ng h√≥a!")
                return
            
            # T·∫£i d·ªØ li·ªáu
            end_date = datetime.now()
            start_date = end_date - timedelta(days=365 * self.years_back.value)
            
            with self.output:
                clear_output()
                print(f"üì• ƒêang t·∫£i d·ªØ li·ªáu {len(funds)} qu·ªπ t·ª´ {start_date.strftime('%Y-%m-%d')}...")
            
            data = yf.download(funds, start=start_date, end=end_date, progress=False)['Adj Close']
            
            if isinstance(data, pd.Series):
                data = data.to_frame()
            
            # X·ª≠ l√Ω d·ªØ li·ªáu
            if data.empty or len(data) < 60:
                with self.output:
                    clear_output()
                    print("‚ùå Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu! Vui l√≤ng:")
                    print("  ‚Ä¢ Ki·ªÉm tra m√£ qu·ªπ c√≥ ƒë√∫ng kh√¥ng")
                    print("  ‚Ä¢ Th·ª≠ tƒÉng s·ªë nƒÉm d·ªØ li·ªáu")
                    print("  ‚Ä¢ Th·ª≠ v·ªõi c√°c qu·ªπ kh√°c c√≥ l·ªãch s·ª≠ d√†i h∆°n")
                return
            
            data = data.dropna(axis=1, thresh=len(data)*0.7)
            data = data.fillna(method='ffill').fillna(method='bfill')
            
            if len(data.columns) < 2:
                with self.output:
                    clear_output()
                    print("‚ùå Kh√¥ng ƒë·ªß qu·ªπ c√≥ d·ªØ li·ªáu h·ª£p l·ªá!")
                return
            
            self.df = data
            
            # T√≠nh to√°n
            with self.output:
                clear_output()
                print("üìä ƒêang t√≠nh to√°n t·ªëi ∆∞u h√≥a danh m·ª•c...")
            
            mu = expected_returns.mean_historical_return(data)
            S = risk_models.sample_cov(data)
            
            # √Åp d·ª•ng r√†ng bu·ªôc theo h·ªì s∆° r·ªßi ro
            profile = self.risk_profiles[self.risk_profile.value]
            
            ef = EfficientFrontier(mu, S)
            ef.add_constraint(lambda w: w <= 0.4)  # Gi·ªõi h·∫°n t·ªëi ƒëa 40% cho 1 qu·ªπ
            
            # T·ªëi ∆∞u h√≥a
            method = self.optimization_method.value
            if method == 'max_sharpe':
                weights = ef.max_sharpe()
            elif method == 'min_volatility':
                weights = ef.min_volatility()
            else:  # efficient_risk
                target_risk = profile['max_volatility']
                weights = ef.efficient_risk(target_risk)
            
            cleaned_weights = ef.clean_weights()
            performance = ef.portfolio_performance(verbose=False)
            
            # L∆∞u k·∫øt qu·∫£
            self.weights = cleaned_weights
            self.performance = performance
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            self.display_analysis()
            self.display_quarterly_plan()
            
            # Chuy·ªÉn sang tab ph√¢n t√≠ch
            self.tabs.selected_index = 1
            
            with self.output:
                clear_output()
                print("‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t! Vui l√≤ng xem c√°c tab 'Ph√¢n T√≠ch Chi Ti·∫øt' v√† 'K·∫ø Ho·∫°ch Theo Qu√Ω'")
        
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói: {str(e)}")
                print("\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:")
                print("  ‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet")
                print("  ‚Ä¢ ƒê·∫£m b·∫£o m√£ qu·ªπ ƒë√∫ng ƒë·ªãnh d·∫°ng (VD: SPY, BND)")
                print("  ‚Ä¢ Th·ª≠ gi·∫£m s·ªë nƒÉm d·ªØ li·ªáu xu·ªëng 2-3 nƒÉm")
                print("  ‚Ä¢ Th·ª≠ v·ªõi c√°c qu·ªπ ph·ªï bi·∫øn: SPY, BND, GLD")
    
    def display_analysis(self):
        """Hi·ªÉn th·ªã ph√¢n t√≠ch chi ti·∫øt"""
        with self.analysis_output:
            clear_output()
            
            # Header
            print("="*90)
            print(" "*30 + "üìä PH√ÇN T√çCH CHI TI·∫æT DANH M·ª§C")
            print("="*90)
            
            # Th√¥ng tin c∆° b·∫£n
            print(f"\nüìÖ K·ª≥ ph√¢n t√≠ch: {self.df.index[0].strftime('%d/%m/%Y')} - {self.df.index[-1].strftime('%d/%m/%Y')}")
            print(f"üìä S·ªë qu·ªπ: {len([w for w in self.weights.values() if w > 0])}/{len(self.df.columns)}")
            print(f"üë§ H·ªì s∆° r·ªßi ro: {self.risk_profile.value}")
            print(f"üí∞ T·ªïng v·ªën: {self.total_capital.value:,.0f} VNƒê")
            
            # Hi·ªáu su·∫•t danh m·ª•c
            print("\n" + "="*90)
            print(" "*25 + "üéØ HI·ªÜU SU·∫§T DANH M·ª§C K·ª≤ V·ªåNG")
            print("="*90)
            
            expected_return = self.performance[0] * 100
            volatility = self.performance[1] * 100
            sharpe = self.performance[2]
            
            print(f"\n{'L·ª£i nhu·∫≠n h√†ng nƒÉm k·ª≥ v·ªçng:':<45} {expected_return:>10.2f}%")
            print(f"{'ƒê·ªô bi·∫øn ƒë·ªông (r·ªßi ro):':<45} {volatility:>10.2f}%")
            print(f"{'Sharpe Ratio:':<45} {sharpe:>10.2f}")
            
            # ƒê√°nh gi√° Sharpe Ratio
            if sharpe > 2:
                rating = "‚≠ê‚≠ê‚≠ê Xu·∫•t s·∫Øc"
            elif sharpe > 1:
                rating = "‚≠ê‚≠ê T·ªët"
            elif sharpe > 0.5:
                rating = "‚≠ê Ch·∫•p nh·∫≠n ƒë∆∞·ª£c"
            else:
                rating = "‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán"
            print(f"{'ƒê√°nh gi√°:':<45} {rating}")
            
            # So s√°nh v·ªõi h·ªì s∆° r·ªßi ro
            profile = self.risk_profiles[self.risk_profile.value]
            print(f"\nüìã So s√°nh v·ªõi h·ªì s∆° '{self.risk_profile.value}':")
            print(f"  ‚Ä¢ R·ªßi ro m·ª•c ti√™u: {profile['max_volatility']*100:.1f}% | R·ªßi ro th·ª±c t·∫ø: {volatility:.1f}%")
            
            if volatility <= profile['max_volatility'] * 100:
                print("  ‚úÖ Danh m·ª•c ph√π h·ª£p v·ªõi h·ªì s∆° r·ªßi ro c·ªßa b·∫°n")
            else:
                print("  ‚ö†Ô∏è Danh m·ª•c c√≥ r·ªßi ro cao h∆°n h·ªì s∆°, c√¢n nh·∫Øc ƒëi·ªÅu ch·ªânh")
            
            # T·ª∑ tr·ªçng qu·ªπ
            print("\n" + "="*90)
            print(" "*30 + "üíº T·ª∂ TR·ªåNG C√ÅC QU·ª∏")
            print("="*90)
            
            weights_df = pd.DataFrame.from_dict(self.weights, orient='index', columns=['T·ª∑ tr·ªçng'])
            weights_df = weights_df[weights_df['T·ª∑ tr·ªçng'] > 0].sort_values('T·ª∑ tr·ªçng', ascending=False)
            weights_df['T·ª∑ tr·ªçng %'] = (weights_df['T·ª∑ tr·ªçng'] * 100).round(2)
            
            print(f"\n{'M√£ qu·ªπ':<15} {'T·ª∑ tr·ªçng':<12} {'Bi·ªÉu ƒë·ªì'}")
            print("-"*90)
            
            for idx, row in weights_df.iterrows():
                bar = "‚ñà" * int(row['T·ª∑ tr·ªçng %'] / 2)
                print(f"{idx:<15} {row['T·ª∑ tr·ªçng %']:>6.2f}%     {bar}")
            
            # Ph√¢n b·ªï v·ªën c·ª• th·ªÉ
            print("\n" + "="*90)
            print(" "*25 + "üí∞ PH√ÇN B·ªî V·ªêN CHI TI·∫æT")
            print("="*90)
            
            latest_prices = get_latest_prices(self.df)
            da = DiscreteAllocation(self.weights, latest_prices, 
                                   total_portfolio_value=self.total_capital.value)
            allocation, leftover = da.greedy_portfolio()
            
            print(f"\n{'M√£ qu·ªπ':<15} {'S·ªë l∆∞·ª£ng':<12} {'Gi√°/ƒë∆°n v·ªã':<18} {'T·ªïng ti·ªÅn (VNƒê)':<20}")
            print("-"*90)
            
            total_invested = 0
            for ticker in weights_df.index:
                if ticker in allocation:
                    shares = allocation[ticker]
                    price = latest_prices[ticker]
                    total = shares * price
                    total_invested += total
                    print(f"{ticker:<15} {shares:<12} ${price:>12,.2f}     {total:>19,.0f}")
            
            print("-"*90)
            print(f"{'T·ªïng ƒë√£ ƒë·∫ßu t∆∞:':<45} {total_invested:>19,.0f} VNƒê")
            print(f"{'S·ªë d∆∞ c√≤n l·∫°i (ti·ªÅn m·∫∑t):':<45} {leftover:>19,.0f} VNƒê")
            print(f"{'T·ª∑ l·ªá ti·ªÅn m·∫∑t:':<45} {(leftover/self.total_capital.value)*100:>18.2f}%")
            
            # Th·ªëng k√™ l·ªãch s·ª≠
            print("\n" + "="*90)
            print(" "*25 + "üìà TH·ªêNG K√ä L·ªäCH S·ª¨ C√ÅC QU·ª∏")
            print("="*90)
            
            returns = self.df.pct_change()
            
            print(f"\n{'M√£ qu·ªπ':<15} {'L·ª£i nhu·∫≠n TB':<18} {'ƒê·ªô bi·∫øn ƒë·ªông':<18} {'Sharpe':<12}")
            print("-"*90)
            
            for ticker in weights_df.index:
                avg_return = returns[ticker].mean() * 252 * 100  # Annualized
                std = returns[ticker].std() * np.sqrt(252) * 100
                sharpe_individual = avg_return / std if std > 0 else 0
                
                print(f"{ticker:<15} {avg_return:>12.2f}%     {std:>12.2f}%     {sharpe_individual:>8.2f}")
            
            # V·∫Ω bi·ªÉu ƒë·ªì
            self.plot_analysis()
    
    def plot_analysis(self):
        """V·∫Ω c√°c bi·ªÉu ƒë·ªì ph√¢n t√≠ch"""
        
        weights_df = pd.DataFrame.from_dict(self.weights, orient='index', columns=['T·ª∑ tr·ªçng'])
        weights_df = weights_df[weights_df['T·ª∑ tr·ªçng'] > 0].sort_values('T·ª∑ tr·ªçng', ascending=False)
        weights_df['T·ª∑ tr·ªçng %'] = (weights_df['T·ª∑ tr·ªçng'] * 100).round(2)
        
        fig = plt.figure(figsize=(16, 12))
        gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)
        
        # 1. Pie chart - T·ª∑ tr·ªçng
        ax1 = fig.add_subplot(gs[0, :2])
        colors = plt.cm.Set3(range(len(weights_df)))
        wedges, texts, autotexts = ax1.pie(weights_df['T·ª∑ tr·ªçng %'], 
                                            labels=weights_df.index,
                                            autopct='%1.1f%%',
                                            colors=colors, 
                                            startangle=90,
                                            textprops={'fontsize': 10})
        ax1.set_title('üíº Ph√¢n B·ªï T·ª∑ Tr·ªçng Danh M·ª•c', fontsize=14, fontweight='bold', pad=20)
        
        # 2. Bar chart - T·ª∑ tr·ªçng
        ax2 = fig.add_subplot(gs[0, 2])
        weights_df.plot(kind='barh', ax=ax2, color=colors, legend=False, y='T·ª∑ tr·ªçng %')
        ax2.set_xlabel('T·ª∑ tr·ªçng (%)', fontsize=10)
        ax2.set_title('üìä Ph√¢n B·ªï Chi Ti·∫øt', fontsize=12, fontweight='bold')
        ax2.grid(axis='x', alpha=0.3)
        
        # 3. Line chart - Gi√° l·ªãch s·ª≠ chu·∫©n h√≥a
        ax3 = fig.add_subplot(gs[1, :])
        normalized_prices = self.df / self.df.iloc[0] * 100
        
        for col in normalized_prices.columns:
            if col in self.weights and self.weights[col] > 0:
                ax3.plot(normalized_prices.index, normalized_prices[col], 
                        label=col, linewidth=2, alpha=0.8)
        
        ax3.set_xlabel('Th·ªùi gian', fontsize=10)
        ax3.set_ylabel('Gi√° chu·∫©n h√≥a (Base = 100)', fontsize=10)
        ax3.set_title('üìà Bi·∫øn ƒê·ªông Gi√° L·ªãch S·ª≠ (Chu·∫©n H√≥a)', fontsize=14, fontweight='bold', pad=15)
        ax3.legend(loc='best', fontsize=9, framealpha=0.9)
        ax3.grid(alpha=0.3)
        ax3.axhline(y=100, color='red', linestyle='--', alpha=0.5, label='Baseline')
        
        # 4. Returns distribution
        ax4 = fig.add_subplot(gs[2, 0])
        returns = self.df.pct_change().dropna()
        
        for col in weights_df.index[:3]:  # Top 3 funds
            if col in returns.columns:
                ax4.hist(returns[col] * 100, bins=50, alpha=0.5, label=col)
        
        ax4.set_xlabel('L·ª£i nhu·∫≠n h√†ng ng√†y (%)', fontsize=9)
        ax4.set_ylabel('T·∫ßn su·∫•t', fontsize=9)
        ax4.set_title('üìä Ph√¢n Ph·ªëi L·ª£i Nhu·∫≠n', fontsize=12, fontweight='bold')
        ax4.legend(fontsize=8)
        ax4.grid(alpha=0.3)
        
        # 5. Correlation heatmap
        ax5 = fig.add_subplot(gs[2, 1:])
        selected_cols = [col for col in self.df.columns if col in self.weights and self.weights[col] > 0]
        corr = self.df[selected_cols].corr()
        
        im = ax5.imshow(corr, cmap='RdYlGn', aspect='auto', vmin=-1, vmax=1)
        ax5.set_xticks(range(len(corr)))
        ax5.set_yticks(range(len(corr)))
        ax5.set_xticklabels(corr.columns, rotation=45, ha='right', fontsize=9)
        ax5.set_yticklabels(corr.columns, fontsize=9)
        ax5.set_title('üîó Ma Tr·∫≠n T∆∞∆°ng Quan Gi·ªØa C√°c Qu·ªπ', fontsize=12, fontweight='bold', pad=10)
        
        for i in range(len(corr)):
            for j in range(len(corr)):
                color = 'white' if abs(corr.iloc[i, j]) > 0.5 else 'black'
                ax5.text(j, i, f'{corr.iloc[i, j]:.2f}',
                        ha="center", va="center", color=color, fontsize=8)
        
        plt.colorbar(im, ax=ax5, label='Correlation')
        
        plt.suptitle('üìä PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø', 
                    fontsize=16, fontweight='bold', y=0.995)
        
        plt.show()
        
        print("\nüí° Ghi ch√∫ v·ªÅ bi·ªÉu ƒë·ªì:")
        print("  ‚Ä¢ T∆∞∆°ng quan g·∫ßn +1: Hai qu·ªπ bi·∫øn ƒë·ªông c√πng chi·ªÅu (k√©m ƒëa d·∫°ng)")
        print("  ‚Ä¢ T∆∞∆°ng quan g·∫ßn 0: ƒê·ªôc l·∫≠p nhau (t·ªët cho ƒëa d·∫°ng h√≥a)")
        print("  ‚Ä¢ T∆∞∆°ng quan g·∫ßn -1: Bi·∫øn ƒë·ªông ng∆∞·ª£c chi·ªÅu (r·∫•t t·ªët cho gi·∫£m r·ªßi ro)")
    
    def display_quarterly_plan(self):
        """Hi·ªÉn th·ªã k·∫ø ho·∫°ch ƒë·∫ßu t∆∞ theo qu√Ω"""
        with self.quarterly_output:
            clear_output()
            
            print("="*90)
            print(" "*25 + "üìÖ K·∫æ HO·∫†CH ƒê·∫¶U T∆Ø THEO QU√ù")
            print("="*90)
            
            # Th√¥ng tin t·ªïng quan
            print(f"\nüí∞ V·ªën ƒë·∫ßu t∆∞ m·ªói qu√Ω: {self.quarterly_invest.value:,.0f} VNƒê")
            print(f"üìä S·ªë qu·ªπ trong danh m·ª•c: {len([w for w in self.weights.values() if w > 0])}")
            
            # T·∫°o k·∫ø ho·∫°ch 4 qu√Ω ti·∫øp theo
            today = datetime.now()
            current_quarter = (today.month - 1) // 3 + 1
            current_year = today.year
            
            print("\n" + "="*90)
            print(" "*30 + "üìÜ K·∫æ HO·∫†CH 4 QU√ù TI·∫æP THEO")
            print("="*90)
            
            weights_df = pd.DataFrame.from_dict(self.weights, orient='index', columns=['T·ª∑ tr·ªçng'])
            weights_df = weights_df[weights_df['T·ª∑ tr·ªçng'] > 0].sort_values('T·ª∑ tr·ªçng', ascending=False)
            
            latest_prices = get_latest_prices(self.df)
            
            for i in range(4):
                quarter = current_quarter + i
                year = current_year
                
                if quarter > 4:
                    quarter = quarter - 4
                    year += 1
                
                print(f"\n{'‚îÅ'*90}")
                print(f"üìå QU√ù {quarter}/{year}")
                print(f"{'‚îÅ'*90}")
                
                start, end = self.get_quarter_dates(year, quarter)
                print(f"Th·ªùi gian: {start.strftime('%d/%m/%Y')} - {end.strftime('%d/%m/%Y')}")
                
                # T√≠nh ph√¢n b·ªï cho qu√Ω n√†y
                da = DiscreteAllocation(self.weights, latest_prices,
                                       total_portfolio_value=self.quarterly_invest.value)
                allocation, leftover = da.greedy_portfolio()
                
                print(f"\n{'M√£ qu·ªπ':<15} {'S·ªë l∆∞·ª£ng mua':<15} {'Gi√° d·ª± ki·∫øn':<18} {'S·ªë ti·ªÅn (VNƒê)':<20}")
                print("-"*90)
                
                total = 0
                for ticker in weights_df.index:
                    if ticker in allocation and allocation[ticker] > 0:
                        shares = allocation[ticker]
                        price = latest_prices[ticker]
                        amount = shares * price
                        total += amount
                        print(f"{ticker:<15} {shares:<15} ${price:>12,.2f}     {amount:>19,.0f}")
                
                print("-"*90)
                print(f"{'T·ªïng ƒë·∫ßu t∆∞:':<48} {total:>19,.0f} VNƒê")
                print(f"{'Ti·ªÅn m·∫∑t d·ª± tr·ªØ:':<48} {leftover:>19,.0f} VNƒê")
                
                # G·ª£i √Ω h√†nh ƒë·ªông
                print(f"\n‚úÖ H√†nh ƒë·ªông c·∫ßn l√†m trong qu√Ω {quarter}/{year}:")
                print(f"   1. Chu·∫©n b·ªã: {self.quarterly_invest.value:,.0f} VNƒê")
                print(f"   2. Ng√†y ƒë·∫ßu t∆∞ ƒë·ªÅ xu·∫•t: {start.strftime('%d/%m/%Y')} (ƒë·∫ßu qu√Ω)")
                print(f"   3. Mua c√°c qu·ªπ theo b·∫£ng ph√¢n b·ªï tr√™n")
                print(f"   4. Gi·ªØ l·∫°i ti·ªÅn m·∫∑t: {leftover:,.0f} VNƒê l√†m d·ª± ph√≤ng")
                print(f"   5. Xem x√©t rebalancing n·∫øu danh m·ª•c l·ªách >5%")
            
            # T·ªïng k·∫øt nƒÉm
            print("\n" + "="*90)
            print(" "*30 + "üìä T·ªîNG K·∫æT NƒÇM")
            print("="*90)
            
            total_yearly = self.quarterly_invest.value * 4
            expected_return_amount = total_yearly * self.performance[0]
            
            print(f"\nT·ªïng v·ªën ƒë·∫ßu t∆∞ c·∫£ nƒÉm: {total_yearly:,.0f} VNƒê")
            print(f"L·ª£i nhu·∫≠n k·ª≥ v·ªçng: {expected_return_amount:,.0f} VNƒê ({self.performance[0]*100:.2f}%)")
            print(f"T·ªïng t√†i s·∫£n d·ª± ki·∫øn cu·ªëi nƒÉm: {total_yearly + expected_return_amount:,.0f} VNƒê")
            
            # L·ªùi khuy√™n
            print("\n" + "="*90)
            print(" "*35 + "üí° L·ªúI KHUY√äN")
            print("="*90)
            
            advice = [
                "üéØ Tu√¢n th·ªß k·ª∑ lu·∫≠t: ƒê·∫ßu t∆∞ ƒë√∫ng s·ªë ti·ªÅn, ƒë√∫ng th·ªùi ƒëi·ªÉm m·ªói qu√Ω",
                "üìä Rebalancing: ƒêi·ªÅu ch·ªânh danh m·ª•c v·ªÅ t·ª∑ tr·ªçng m·ª•c ti√™u m·ªói 6 th√°ng",
                "üìà Theo d√µi: Xem x√©t hi·ªáu su·∫•t cu·ªëi m·ªói qu√Ω, kh√¥ng c·∫ßn ki·ªÉm tra h√†ng ng√†y",
                "üßò Ki√™n nh·∫´n: ƒê·∫ßu t∆∞ d√†i h·∫°n, kh√¥ng ho·∫£ng lo·∫°n khi th·ªã tr∆∞·ªùng gi·∫£m",
                "üìö H·ªçc h·ªèi: ƒê·ªçc b√°o c√°o qu·ªπ, c·∫≠p nh·∫≠t ki·∫øn th·ª©c th·ªã tr∆∞·ªùng",
                "üí∞ D·ª± ph√≤ng: Lu√¥n gi·ªØ 3-6 th√°ng chi ph√≠ sinh ho·∫°t b·∫±ng ti·ªÅn m·∫∑t",
                "üîÑ Linh ho·∫°t: ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch n·∫øu ho√†n c·∫£nh thay ƒë·ªïi",
                "‚ö†Ô∏è C·∫£nh gi√°c: Kh√¥ng vay n·ª£ ƒë·ªÉ ƒë·∫ßu t∆∞, ch·ªâ d√πng ti·ªÅn nh√†n r·ªói"
            ]
            
            for tip in advice:
                print(f"\n{tip}")
            
            # Checklist theo qu√Ω
            print("\n" + "="*90)
            print(" "*30 + "‚úÖ CHECKLIST T·ª™NG QU√ù")
            print("="*90)
            
            checklist = """
            üìã ƒê·∫ßu qu√Ω (Tu·∫ßn ƒë·∫ßu ti√™n):
               ‚ñ° Chu·∫©n b·ªã v·ªën ƒë·∫ßu t∆∞
               ‚ñ° Xem l·∫°i t·ª∑ tr·ªçng danh m·ª•c hi·ªán t·∫°i
               ‚ñ° Ki·ªÉm tra gi√° qu·ªπ
               ‚ñ° Th·ª±c hi·ªán giao d·ªãch mua
            
            üìã Gi·ªØa qu√Ω (Tu·∫ßn th·ª© 6-7):
               ‚ñ° Theo d√µi hi·ªáu su·∫•t danh m·ª•c
               ‚ñ° ƒê·ªçc tin t·ª©c th·ªã tr∆∞·ªùng
               ‚ñ° Ghi ch√©p nh·∫≠t k√Ω ƒë·∫ßu t∆∞
            
            üìã Cu·ªëi qu√Ω (Tu·∫ßn cu·ªëi):
               ‚ñ° T√≠nh to√°n l·ª£i nhu·∫≠n/l·ªó
               ‚ñ° ƒê√°nh gi√° hi·ªáu su·∫•t t·ª´ng qu·ªπ
               ‚ñ° Quy·∫øt ƒë·ªãnh rebalancing (n·∫øu c·∫ßn)
               ‚ñ° L·∫≠p k·∫ø ho·∫°ch cho qu√Ω ti·∫øp theo
               ‚ñ° C·∫≠p nh·∫≠t b·∫£ng theo d√µi Excel/Google Sheets
            """
            
            print(checklist)
            
            # Template theo d√µi
            print("\n" + "="*90)
            print(" "*25 + "üìù TEMPLATE THEO D√ïI (T·ª± ghi ch√©p)")
            print("="*90)
            
            template = f"""
            Qu√Ω: ___ / NƒÉm: _____
            Ng√†y ƒë·∫ßu t∆∞: ___/___/____
            
            {'M√£ qu·ªπ':<15} | {'S·ªë l∆∞·ª£ng':<10} | {'Gi√° mua':<12} | {'T·ªïng ti·ªÅn':<15} | {'Ghi ch√∫'}
            {'-'*85}
            
            
            
            T·ªïng ƒë·∫ßu t∆∞ qu√Ω n√†y: _______________ VNƒê
            Hi·ªáu su·∫•t qu√Ω tr∆∞·ªõc: ______%
            T·ªïng t√†i s·∫£n hi·ªán t·∫°i: _______________ VNƒê
            
            ƒê√°nh gi√°:
            - ƒêi·ªÉm t·ªët: ___________________________________________________
            - C·∫ßn c·∫£i thi·ªán: _______________________________________________
            - B√†i h·ªçc: _____________________________________________________
            """
            
            print(template)
    
    def display(self):
        """Hi·ªÉn th·ªã ·ª©ng d·ª•ng"""
        display(self.header)
        display(self.tabs)

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng
print("="*90)
print("üöÄ KH·ªûI ƒê·ªòNG ·ª®NG D·ª§NG PH√ÇN B·ªî ƒê·∫¶U T∆Ø QU·ª∏ THEO QU√ù")
print("="*90)
print("\nüì¶ Y√™u c·∫ßu th∆∞ vi·ªán: pandas, numpy, yfinance, matplotlib, seaborn, pypfopt, ipywidgets")
print("üí° N·∫øu ch∆∞a c√†i ƒë·∫∑t, ch·∫°y: !pip install yfinance pypfopt ipywidgets")
print("\n" + "="*90)
print("‚ú® ·ª®ng d·ª•ng ƒë√£ s·∫µn s√†ng! H√£y b·∫Øt ƒë·∫ßu v·ªõi tab 'Thi·∫øt L·∫≠p Danh M·ª•c'")
print("="*90 + "\n")

app = QuarterlyFundPortfolio()
app.display()
