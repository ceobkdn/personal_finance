"""
Portfolio Rebalancing & Tracking Tool
C√¥ng c·ª• theo d√µi v√† c√¢n b·∫±ng l·∫°i danh m·ª•c ƒë·∫ßu t∆∞
D·ª±a tr√™n: https://evgenypogorelov.com/portfolio-rebalancing-python
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

# Import th∆∞ vi·ªán c·∫ßn thi·∫øt
try:
    import yfinance as yf
    YFINANCE_AVAILABLE = True
except:
    YFINANCE_AVAILABLE = False
    print("‚ö†Ô∏è yfinance kh√¥ng c√≥")

try:
    from vnstock3 import Vnstock
    VNSTOCK_AVAILABLE = True
except:
    VNSTOCK_AVAILABLE = False

try:
    import ipywidgets as widgets
    from IPython.display import display, clear_output, HTML
    WIDGETS_AVAILABLE = True
except:
    WIDGETS_AVAILABLE = False

warnings.filterwarnings('ignore')
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (15, 10)


class PortfolioRebalancer:
    """
    C√¥ng c·ª• c√¢n b·∫±ng l·∫°i danh m·ª•c ƒë·∫ßu t∆∞
    """
    
    def __init__(self):
        self.vnstock = Vnstock() if VNSTOCK_AVAILABLE else None
        
        # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        self.rebal_threshold = 0.05  # 5% drift
        self.rebal_timeframe = 180  # 180 ng√†y
        self.new_money = 0  # Ti·ªÅn m·ªõi ƒë·∫ßu t∆∞ th√™m
        
        # D·ªØ li·ªáu
        self.current_portfolio = None
        self.target_allocation = None
        self.latest_prices = None
        self.rebalanced_portfolio = None
        
        # Account types
        self.account_types = {
            'TAXB': 'T√†i kho·∫£n ch·ªãu thu·∫ø',
            '401K': '401K',
            'RIRA': 'Roth IRA',
            'TIRA': 'Traditional IRA',
            'CASH': 'Ti·ªÅn m·∫∑t'
        }
        
        # Asset classes
        self.asset_classes = {
            'ST': 'C·ªï phi·∫øu',
            'BD': 'Tr√°i phi·∫øu',
            'CS': 'Ti·ªÅn m·∫∑t & H√†ng h√≥a',
            'RE': 'B·∫•t ƒë·ªông s·∫£n',
            'ALT': 'Thay th·∫ø'
        }
        
        if WIDGETS_AVAILABLE:
            self.create_widgets()
    
    def is_vn_stock(self, symbol):
        """Ki·ªÉm tra m√£ VN"""
        return (len(symbol) == 3 and symbol.isupper() and 
                not any(c in symbol for c in ['.', '-', '^']))
    
    def get_latest_prices(self, tickers):
        """L·∫•y gi√° m·ªõi nh·∫•t"""
        prices = {}
        
        vn_tickers = [t for t in tickers if self.is_vn_stock(t)]
        intl_tickers = [t for t in tickers if not self.is_vn_stock(t)]
        
        # L·∫•y gi√° VN
        if vn_tickers and self.vnstock:
            for ticker in vn_tickers:
                try:
                    stock = self.vnstock.stock(symbol=ticker, source='VCI')
                    df = stock.quote.history(start='2024-01-01', end=datetime.now().strftime('%Y-%m-%d'))
                    if not df.empty:
                        prices[ticker] = df['close'].iloc[-1]
                except:
                    print(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {ticker}")
        
        # L·∫•y gi√° qu·ªëc t·∫ø
        if intl_tickers and YFINANCE_AVAILABLE:
            try:
                data = yf.download(intl_tickers, period='5d', progress=False)
                if isinstance(data, pd.DataFrame):
                    if 'Adj Close' in data.columns:
                        for ticker in intl_tickers:
                            if ticker in data['Adj Close'].columns:
                                prices[ticker] = data['Adj Close'][ticker].iloc[-1]
                            elif len(intl_tickers) == 1:
                                prices[ticker] = data['Adj Close'].iloc[-1]
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói yfinance: {e}")
        
        return pd.Series(prices, name='close')
    
    def create_widgets(self):
        """T·∫°o giao di·ªán"""
        
        # Header
        self.header = widgets.HTML(
            value="""
            <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        padding: 25px; border-radius: 12px; margin-bottom: 20px;'>
                <h1 style='color: white; text-align: center; margin: 0;'>
                    ‚öñÔ∏è C√¥ng C·ª• C√¢n B·∫±ng Danh M·ª•c ƒê·∫ßu T∆∞
                </h1>
                <p style='color: white; text-align: center; margin-top: 8px;'>
                    Portfolio Rebalancing & Tracking Tool
                </p>
            </div>
            """
        )
        
        # Tab system
        self.tabs = widgets.Tab()
        
        # Tab 1: Danh m·ª•c hi·ªán t·∫°i
        self.current_portfolio_text = widgets.Textarea(
            value='ticker,shares,cost_basis,account_type,asset_class,last_rebal_date\nSPY,100,400,TAXB,ST,2024-01-01\nBND,200,80,RIRA,BD,2024-01-01\nGLD,50,180,TAXB,CS,2024-01-01',
            placeholder='ticker,shares,cost_basis,account_type,asset_class,last_rebal_date',
            description='',
            layout=widgets.Layout(width='95%', height='200px')
        )
        
        # Tab 2: Ph√¢n b·ªï m·ª•c ti√™u
        self.target_allocation_text = widgets.Textarea(
            value='ticker,allocation_target,asset_class\nSPY,0.60,ST\nBND,0.30,BD\nGLD,0.10,CS',
            placeholder='ticker,allocation_target,asset_class',
            description='',
            layout=widgets.Layout(width='95%', height='150px')
        )
        
        # C·∫•u h√¨nh
        self.rebal_threshold_input = widgets.FloatSlider(
            value=5,
            min=1,
            max=20,
            step=1,
            description='Ng∆∞·ª°ng drift (%):',
            style={'description_width': '150px'}
        )
        
        self.rebal_timeframe_input = widgets.IntSlider(
            value=180,
            min=30,
            max=365,
            step=30,
            description='Th·ªùi gian (ng√†y):',
            style={'description_width': '150px'}
        )
        
        self.new_money_input = widgets.FloatText(
            value=0,
            description='Ti·ªÅn m·ªõi (VNƒê):',
            step=1000000,
            style={'description_width': '150px'}
        )
        
        # N√∫t ph√¢n t√≠ch
        self.rebalance_btn = widgets.Button(
            description='‚öñÔ∏è C√¢n B·∫±ng L·∫°i',
            button_style='success',
            layout=widgets.Layout(width='200px', height='40px')
        )
        self.rebalance_btn.on_click(self.run_rebalance)
        
        # Output
        self.output = widgets.Output()
        self.analysis_output = widgets.Output()
        self.transactions_output = widgets.Output()
        
        # Tab layouts
        tab1 = widgets.VBox([
            widgets.HTML('<h2>üìä Danh M·ª•c Hi·ªán T·∫°i</h2>'),
            widgets.HTML('<p>Nh·∫≠p danh m·ª•c hi·ªán t·∫°i c·ªßa b·∫°n (CSV format):</p>'),
            widgets.HTML('<p><i>C·ªôt: ticker, shares (s·ªë l∆∞·ª£ng), cost_basis (gi√° mua), account_type (lo·∫°i TK), asset_class (lo·∫°i t√†i s·∫£n), last_rebal_date (l·∫ßn c√¢n b·∫±ng cu·ªëi)</i></p>'),
            self.current_portfolio_text,
            widgets.HTML('<br><h3>üéØ Ph√¢n B·ªï M·ª•c Ti√™u</h3>'),
            widgets.HTML('<p>Nh·∫≠p t·ª∑ tr·ªçng m·ª•c ti√™u (CSV format):</p>'),
            widgets.HTML('<p><i>C·ªôt: ticker, allocation_target (t·ª∑ tr·ªçng 0-1), asset_class</i></p>'),
            self.target_allocation_text,
            widgets.HTML('<br><h3>‚öôÔ∏è C·∫•u H√¨nh</h3>'),
            self.rebal_threshold_input,
            self.rebal_timeframe_input,
            self.new_money_input,
            widgets.HTML('<br>'),
            self.rebalance_btn,
            self.output
        ])
        
        tab2 = widgets.VBox([
            widgets.HTML('<h2>üìà Ph√¢n T√≠ch C√¢n B·∫±ng</h2>'),
            self.analysis_output
        ])
        
        tab3 = widgets.VBox([
            widgets.HTML('<h2>üíº Giao D·ªãch C·∫ßn Th·ª±c Hi·ªán</h2>'),
            self.transactions_output
        ])
        
        self.tabs.children = [tab1, tab2, tab3]
        self.tabs.set_title(0, 'üìù Nh·∫≠p Li·ªáu')
        self.tabs.set_title(1, 'üìä Ph√¢n T√≠ch')
        self.tabs.set_title(2, 'üíº Giao D·ªãch')
    
    def parse_input(self):
        """Parse input data"""
        try:
            # Parse current portfolio
            from io import StringIO
            current_df = pd.read_csv(StringIO(self.current_portfolio_text.value))
            current_df['last_rebal_date'] = pd.to_datetime(current_df['last_rebal_date'])
            
            # Parse target allocation
            target_df = pd.read_csv(StringIO(self.target_allocation_text.value))
            
            # Validate
            if not np.isclose(target_df['allocation_target'].sum(), 1.0, atol=0.01):
                raise ValueError(f"T·ªïng t·ª∑ tr·ªçng m·ª•c ti√™u = {target_df['allocation_target'].sum():.2f}, c·∫ßn = 1.0")
            
            return current_df, target_df
        
        except Exception as e:
            raise ValueError(f"L·ªói parse d·ªØ li·ªáu: {str(e)}")
    
    def run_rebalance(self, b=None):
        """Ch·∫°y rebalancing"""
        with self.output:
            clear_output()
            print("üîÑ ƒêang ph√¢n t√≠ch...")
        
        try:
            # Parse input
            current_df, target_df = self.parse_input()
            
            # Get settings
            self.rebal_threshold = self.rebal_threshold_input.value / 100
            self.rebal_timeframe = self.rebal_timeframe_input.value
            self.new_money = self.new_money_input.value
            
            # Get latest prices
            all_tickers = list(set(current_df['ticker'].tolist() + target_df['ticker'].tolist()))
            
            with self.output:
                clear_output()
                print(f"üì• ƒêang l·∫•y gi√° {len(all_tickers)} qu·ªπ...")
            
            prices = self.get_latest_prices(all_tickers)
            
            if prices.empty:
                raise ValueError("Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°!")
            
            # Aggregate current portfolio
            current_agg = current_df.groupby('ticker').agg({
                'shares': 'sum',
                'cost_basis': 'mean',
                'asset_class': 'first',
                'last_rebal_date': 'max'
            }).reset_index()
            
            # Merge with prices and target
            portfolio = current_agg.merge(target_df[['ticker', 'allocation_target']], 
                                         on='ticker', how='outer')
            portfolio = portfolio.merge(prices.to_frame('close'), 
                                       left_on='ticker', right_index=True, how='left')
            
            # Fill NaN
            portfolio['shares'] = portfolio['shares'].fillna(0)
            portfolio['allocation_target'] = portfolio['allocation_target'].fillna(0)
            portfolio['cost_basis'] = portfolio['cost_basis'].fillna(portfolio['close'])
            
            # Calculate current values
            portfolio['value'] = portfolio['shares'] * portfolio['close']
            total_value = portfolio['value'].sum()
            portfolio['allocation_current'] = portfolio['value'] / total_value
            
            # Calculate drift
            portfolio['drift'] = portfolio['allocation_target'] - portfolio['allocation_current']
            portfolio['drift_pct'] = portfolio['drift'] / portfolio['allocation_target'].replace(0, 1)
            
            # Calculate days since rebalance
            today = pd.to_datetime(datetime.now().strftime('%Y-%m-%d'))
            portfolio['days_since_rebal'] = (today - portfolio['last_rebal_date']).dt.days
            portfolio['days_since_rebal'] = portfolio['days_since_rebal'].fillna(999)
            
            # Determine rebalance flags
            portfolio['needs_rebal_drift'] = np.abs(portfolio['drift']) > self.rebal_threshold
            portfolio['needs_rebal_time'] = portfolio['days_since_rebal'] > self.rebal_timeframe
            portfolio['needs_rebal_exit'] = (portfolio['allocation_current'] > 0) & (portfolio['allocation_target'] == 0)
            portfolio['needs_rebal'] = (portfolio['needs_rebal_drift'] | 
                                       portfolio['needs_rebal_time'] | 
                                       portfolio['needs_rebal_exit'])
            
            # Calculate target with new money
            total_value_new = total_value + self.new_money
            portfolio['target_value'] = portfolio['allocation_target'] * total_value_new
            portfolio['value_change'] = portfolio['target_value'] - portfolio['value']
            portfolio['shares_change'] = portfolio['value_change'] / portfolio['close']
            
            # Round shares
            portfolio['shares_change_rounded'] = portfolio['shares_change'].round(0)
            portfolio['new_shares'] = portfolio['shares'] + portfolio['shares_change_rounded']
            portfolio['new_value'] = portfolio['new_shares'] * portfolio['close']
            portfolio['new_allocation'] = portfolio['new_value'] / portfolio['new_value'].sum()
            
            # Store results
            self.current_portfolio = current_df
            self.target_allocation = target_df
            self.rebalanced_portfolio = portfolio
            
            # Display results
            self.display_analysis()
            self.display_transactions()
            
            self.tabs.selected_index = 1
            
            with self.output:
                clear_output()
                print("‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t! Xem tab Ph√¢n T√≠ch v√† Giao D·ªãch")
        
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói: {str(e)}")
                import traceback
                print("\n" + traceback.format_exc())
    
    def display_analysis(self):
        """Hi·ªÉn th·ªã ph√¢n t√≠ch"""
        with self.analysis_output:
            clear_output()
            
            df = self.rebalanced_portfolio
            
            print("="*90)
            print(" "*30 + "üìä PH√ÇN T√çCH C√ÇN B·∫∞NG DANH M·ª§C")
            print("="*90)
            
            # T·ªïng quan
            print(f"\nüí∞ T·ªïng gi√° tr·ªã hi·ªán t·∫°i: {df['value'].sum():,.0f} VNƒê")
            print(f"üíµ Ti·ªÅn m·ªõi ƒë·∫ßu t∆∞ th√™m: {self.new_money:,.0f} VNƒê")
            print(f"üíé T·ªïng gi√° tr·ªã m·ªõi: {df['new_value'].sum():,.0f} VNƒê")
            
            # S·ªë l∆∞·ª£ng c·∫ßn rebalance
            needs_rebal = df[df['needs_rebal']].shape[0]
            print(f"\n‚ö†Ô∏è C·∫ßn c√¢n b·∫±ng l·∫°i: {needs_rebal}/{len(df)} qu·ªπ")
            
            # Hi·ªÉn th·ªã b·∫£ng
            print("\n" + "="*90)
            print(" "*35 + "üíº DANH M·ª§C CHI TI·∫æT")
            print("="*90)
            
            display_df = df[['ticker', 'shares', 'close', 'value', 
                            'allocation_current', 'allocation_target', 
                            'drift', 'needs_rebal']].copy()
            display_df['allocation_current'] = (display_df['allocation_current'] * 100).round(2)
            display_df['allocation_target'] = (display_df['allocation_target'] * 100).round(2)
            display_df['drift'] = (display_df['drift'] * 100).round(2)
            
            display_df.columns = ['Ticker', 'S·ªë l∆∞·ª£ng', 'Gi√°', 'Gi√° tr·ªã', 
                                 'Hi·ªán t·∫°i (%)', 'M·ª•c ti√™u (%)', 'L·ªách (%)', 'C·∫ßn rebal']
            
            print(display_df.to_string(index=False))
            
            # V·∫Ω bi·ªÉu ƒë·ªì
            self.plot_rebalance_charts()
    
    def plot_rebalance_charts(self):
        """V·∫Ω bi·ªÉu ƒë·ªì"""
        df = self.rebalanced_portfolio
        
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        
        # 1. Current vs Target Allocation
        ax1 = axes[0, 0]
        x = np.arange(len(df))
        width = 0.35
        
        ax1.bar(x - width/2, df['allocation_current'] * 100, width, 
               label='Hi·ªán t·∫°i', alpha=0.8, color='#3498db')
        ax1.bar(x + width/2, df['allocation_target'] * 100, width, 
               label='M·ª•c ti√™u', alpha=0.8, color='#2ecc71')
        
        ax1.set_xlabel('Ticker')
        ax1.set_ylabel('T·ª∑ tr·ªçng (%)')
        ax1.set_title('üìä So S√°nh Ph√¢n B·ªï: Hi·ªán T·∫°i vs M·ª•c Ti√™u', fontweight='bold', pad=15)
        ax1.set_xticks(x)
        ax1.set_xticklabels(df['ticker'], rotation=45, ha='right')
        ax1.legend()
        ax1.grid(axis='y', alpha=0.3)
        
        # 2. Drift Analysis
        ax2 = axes[0, 1]
        colors = ['#e74c3c' if d < -self.rebal_threshold else 
                 '#2ecc71' if d > self.rebal_threshold else '#95a5a6' 
                 for d in df['drift']]
        
        ax2.barh(df['ticker'], df['drift'] * 100, color=colors, alpha=0.8)
        ax2.axvline(x=-self.rebal_threshold*100, color='red', linestyle='--', 
                   linewidth=2, label=f'Ng∆∞·ª°ng -{self.rebal_threshold*100}%')
        ax2.axvline(x=self.rebal_threshold*100, color='red', linestyle='--', 
                   linewidth=2, label=f'Ng∆∞·ª°ng +{self.rebal_threshold*100}%')
        ax2.axvline(x=0, color='black', linewidth=1)
        ax2.set_xlabel('ƒê·ªô l·ªách (%)')
        ax2.set_title('üìâ Ph√¢n T√≠ch Drift', fontweight='bold', pad=15)
        ax2.legend()
        ax2.grid(axis='x', alpha=0.3)
        
        # 3. Value Changes
        ax3 = axes[1, 0]
        colors = ['#2ecc71' if v > 0 else '#e74c3c' for v in df['value_change']]
        ax3.bar(df['ticker'], df['value_change'], color=colors, alpha=0.8)
        ax3.axhline(y=0, color='black', linewidth=1)
        ax3.set_xlabel('Ticker')
        ax3.set_ylabel('Thay ƒë·ªïi gi√° tr·ªã (VNƒê)')
        ax3.set_title('üí∞ Thay ƒê·ªïi Gi√° Tr·ªã', fontweight='bold', pad=15)
        ax3.tick_params(axis='x', rotation=45)
        ax3.grid(axis='y', alpha=0.3)
        
        # 4. Pie chart - New Allocation
        ax4 = axes[1, 1]
        # Only show non-zero allocations
        pie_df = df[df['new_allocation'] > 0.001].copy()
        colors_pie = plt.cm.Set3(range(len(pie_df)))
        
        wedges, texts, autotexts = ax4.pie(pie_df['new_allocation'], 
                                            labels=pie_df['ticker'],
                                            autopct='%1.1f%%',
                                            colors=colors_pie,
                                            startangle=90)
        ax4.set_title('üéØ Ph√¢n B·ªï Sau C√¢n B·∫±ng', fontweight='bold', pad=15)
        
        # Make percentage text more readable
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        plt.tight_layout()
        plt.show()
        
        print("\nüí° Gi·∫£i th√≠ch:")
        print("  ‚Ä¢ C·ªôt xanh l√°: C·∫ßn MUA th√™m")
        print("  ‚Ä¢ C·ªôt ƒë·ªè: C·∫ßn B√ÅN b·ªõt")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng drift: ¬±{self.rebal_threshold*100}%")
    
    def display_transactions(self):
        """Hi·ªÉn th·ªã giao d·ªãch c·∫ßn th·ª±c hi·ªán"""
        with self.transactions_output:
            clear_output()
            
            df = self.rebalanced_portfolio
            
            print("="*80)
            print(" "*25 + "üíº GIAO D·ªäCH C·∫¶N TH·ª∞C HI·ªÜN")
            print("="*80)
            
            # L·ªçc c√°c giao d·ªãch c·∫ßn l√†m
            transactions = df[df['shares_change_rounded'] != 0].copy()
            transactions = transactions.sort_values('shares_change_rounded', ascending=False)
            
            if len(transactions) == 0:
                print("\n‚úÖ Kh√¥ng c·∫ßn th·ª±c hi·ªán giao d·ªãch n√†o!")
                print("Danh m·ª•c c·ªßa b·∫°n ƒë√£ c√¢n b·∫±ng t·ªët.")
                return
            
            # Chia th√†nh mua v√† b√°n
            buys = transactions[transactions['shares_change_rounded'] > 0]
            sells = transactions[transactions['shares_change_rounded'] < 0]
            
            # Hi·ªÉn th·ªã l·ªánh MUA
            if len(buys) > 0:
                print("\n" + "="*80)
                print(" "*35 + "üü¢ L·ªÜNH MUA")
                print("="*80)
                print(f"\n{'Ticker':<10} {'SL mua':<10} {'Gi√°':<12} {'T·ªïng ti·ªÅn':<18} {'T·ª∑ tr·ªçng m·ªõi':<12}")
                print("-"*80)
                
                total_buy = 0
                for _, row in buys.iterrows():
                    amount = row['shares_change_rounded'] * row['close']
                    total_buy += amount
                    print(f"{row['ticker']:<10} {int(row['shares_change_rounded']):<10} "
                          f"{row['close']:>10,.2f}  {amount:>16,.0f}  "
                          f"{row['new_allocation']*100:>10.2f}%")
                
                print("-"*80)
                print(f"{'T·ªïng ti·ªÅn c·∫ßn:':<34} {total_buy:>16,.0f} VNƒê")
            
            # Hi·ªÉn th·ªã l·ªánh B√ÅN
            if len(sells) > 0:
                print("\n" + "="*80)
                print(" "*35 + "üî¥ L·ªÜNH B√ÅN")
                print("="*80)
                print(f"\n{'Ticker':<10} {'SL b√°n':<10} {'Gi√°':<12} {'T·ªïng ti·ªÅn':<18} {'T·ª∑ tr·ªçng m·ªõi':<12}")
                print("-"*80)
                
                total_sell = 0
                for _, row in sells.iterrows():
                    amount = abs(row['shares_change_rounded']) * row['close']
                    total_sell += amount
                    print(f"{row['ticker']:<10} {int(abs(row['shares_change_rounded'])):<10} "
                          f"{row['close']:>10,.2f}  {amount:>16,.0f}  "
                          f"{row['new_allocation']*100:>10.2f}%")
                
                print("-"*80)
                print(f"{'T·ªïng ti·ªÅn thu:':<34} {total_sell:>16,.0f} VNƒê")
            
            # T·ªïng k·∫øt
            print("\n" + "="*80)
            print(" "*32 + "üìä T·ªîNG K·∫æT")
            print("="*80)
            
            net_cash_flow = total_buy - total_sell - self.new_money
            
            print(f"\nTi·ªÅn t·ª´ b√°n: {total_sell:>25,.0f} VNƒê")
            print(f"Ti·ªÅn m·ªõi th√™m: {self.new_money:>23,.0f} VNƒê")
            print(f"T·ªïng c√≥ s·∫µn: {total_sell + self.new_money:>23,.0f} VNƒê")
            print(f"Ti·ªÅn c·∫ßn mua: {total_buy:>24,.0f} VNƒê")
            print("-"*80)
            print(f"Ch√™nh l·ªách: {net_cash_flow:>26,.0f} VNƒê")
            
            if abs(net_cash_flow) < 1000:
                print("\n‚úÖ C√¢n ƒë·ªëi t·ªët!")
            elif net_cash_flow < 0:
                print(f"\n‚ö†Ô∏è Thi·∫øu {abs(net_cash_flow):,.0f} VNƒê - C·∫ßn th√™m ti·ªÅn")
            else:
                print(f"\nüí∞ D∆∞ {net_cash_flow:,.0f} VNƒê - C√≥ th·ªÉ gi·ªØ l·∫°i")
            
            # L∆∞u √Ω
            print("\n" + "="*80)
            print(" "*32 + "üí° L∆ØU √ù")
            print("="*80)
            print("""
‚úÖ Checklist tr∆∞·ªõc khi th·ª±c hi·ªán:
   ‚ñ° Ki·ªÉm tra gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i
   ‚ñ° T√≠nh ph√≠ giao d·ªãch v√† thu·∫ø
   ‚ñ° Xem x√©t t√°c ƒë·ªông thu·∫ø (tax-loss harvesting)
   ‚ñ° ƒê·∫£m b·∫£o c√≥ ƒë·ªß ti·ªÅn m·∫∑t
   ‚ñ° Th·ª±c hi·ªán theo ƒë√∫ng th·ª© t·ª±: B√ÅN tr∆∞·ªõc, MUA sau
   
‚ö†Ô∏è C√°c y·∫øu t·ªë c·∫ßn c√¢n nh·∫Øc:
   ‚Ä¢ Chi ph√≠ giao d·ªãch
   ‚Ä¢ T√°c ƒë·ªông thu·∫ø (ch√™nh l·ªách v·ªën)
   ‚Ä¢ Th·ªùi ƒëi·ªÉm th·ª±c hi·ªán (tr√°nh FOMO)
   ‚Ä¢ Thanh kho·∫£n th·ªã tr∆∞·ªùng
   ‚Ä¢ C√≥ n√™n rebalance 100% hay t·ª´ng ph·∫ßn
            """)
            
            # Export instructions
            print("\nüì• Export d·ªØ li·ªáu:")
            print("B·∫°n c√≥ th·ªÉ copy b·∫£ng tr√™n v√†o Excel ƒë·ªÉ theo d√µi")
    
    def display(self):
        """Hi·ªÉn th·ªã ·ª©ng d·ª•ng"""
        if WIDGETS_AVAILABLE:
            display(self.header)
            display(self.tabs)
        else:
            print("‚ùå C·∫ßn ipywidgets ƒë·ªÉ ch·∫°y GUI")


# ==================== KH·ªûI ƒê·ªòNG ====================

def main():
    print("="*80)
    print("‚öñÔ∏è PORTFOLIO REBALANCING & TRACKING TOOL")
    print("="*80)
    
    print(f"\n{'pandas:':<20} ‚úÖ")
    print(f"{'yfinance:':<20} {'‚úÖ' if YFINANCE_AVAILABLE else '‚ùå'}")
    print(f"{'vnstock3:':<20} {'‚úÖ' if VNSTOCK_AVAILABLE else '‚ö†Ô∏è (t√πy ch·ªçn)'}")
    print(f"{'ipywidgets:':<20} {'‚úÖ' if WIDGETS_AVAILABLE else '‚ùå'}")
    
    if not WIDGETS_AVAILABLE:
        print("\n‚ùå C·∫ßn ipywidgets!")
        print("üì¶ C√†i ƒë·∫∑t: pip install ipywidgets")
        return
    
    print("\n" + "="*80)
    print("‚ú® ·ª®ng d·ª•ng s·∫µn s√†ng!")
    print("="*80)
    print("\nüí° H∆∞·ªõng d·∫´n nhanh:")
    print("  1. Tab 'Nh·∫≠p Li·ªáu': Nh·∫≠p danh m·ª•c hi·ªán t·∫°i v√† m·ª•c ti√™u")
    print("  2. Tab 'Ph√¢n T√≠ch': Xem ph√¢n t√≠ch chi ti·∫øt")
    print("  3. Tab 'Giao D·ªãch': L·ªánh mua/b√°n c·ª• th·ªÉ")
    print("\n" + "="*80 + "\n")
    
    app = PortfolioRebalancer()
    app.display()


# ==================== HELPER FUNCTIONS ====================

def create_sample_portfolio():
    """T·∫°o portfolio m·∫´u ƒë·ªÉ test"""
    
    current = pd.DataFrame({
        'ticker': ['SPY', 'BND', 'GLD', 'VNM', 'VCB'],
        'shares': [100, 200, 50, 1000, 500],
        'cost_basis': [400, 80, 180, 85, 92],
        'account_type': ['TAXB', 'RIRA', 'TAXB', 'TAXB', 'RIRA'],
        'asset_class': ['ST', 'BD', 'CS', 'ST', 'ST'],
        'last_rebal_date': ['2024-01-01']*5
    })
    
    target = pd.DataFrame({
        'ticker': ['SPY', 'BND', 'GLD', 'VNM', 'VCB'],
        'allocation_target': [0.40, 0.30, 0.10, 0.15, 0.05],
        'asset_class': ['ST', 'BD', 'CS', 'ST', 'ST']
    })
    
    return current, target


def export_to_csv(portfolio_df, filename='portfolio_rebalance.csv'):
    """Export k·∫øt qu·∫£ ra CSV"""
    portfolio_df.to_csv(filename, index=False)
    print(f"‚úÖ ƒê√£ xu·∫•t file: {filename}")


def calculate_tax_impact(portfolio_df, tax_rate=0.20):
    """T√≠nh t√°c ƒë·ªông thu·∫ø"""
    
    # Ch·ªâ t√≠nh thu·∫ø cho l·ªánh B√ÅN c√≥ l√£i
    sells = portfolio_df[portfolio_df['shares_change_rounded'] < 0].copy()
    
    if len(sells) == 0:
        return 0
    
    sells['capital_gain'] = (sells['close'] - sells['cost_basis']) * abs(sells['shares_change_rounded'])
    sells['tax'] = sells['capital_gain'].clip(lower=0) * tax_rate
    
    total_tax = sells['tax'].sum()
    
    print("\n" + "="*80)
    print(" "*30 + "üí∞ PH√ÇN T√çCH THU·∫æ")
    print("="*80)
    print(f"\n{'Ticker':<10} {'Gi√° mua':<12} {'Gi√° b√°n':<12} {'L√£i/l·ªó':<15} {'Thu·∫ø (20%)':<15}")
    print("-"*80)
    
    for _, row in sells.iterrows():
        print(f"{row['ticker']:<10} {row['cost_basis']:>10,.0f}  {row['close']:>10,.0f}  "
              f"{row['capital_gain']:>13,.0f}  {row['tax']:>13,.0f}")
    
    print("-"*80)
    print(f"{'T·ªïng thu·∫ø ph·∫£i n·ªôp:':<44} {total_tax:>13,.0f} VNƒê")
    
    return total_tax


def schedule_rebalance(months_interval=6):
    """L·ªãch rebalance ƒë·ªÅ xu·∫•t"""
    
    today = datetime.now()
    schedule = []
    
    for i in range(1, 5):
        next_date = today + timedelta(days=months_interval*30*i)
        quarter = (next_date.month - 1) // 3 + 1
        schedule.append({
            'date': next_date.strftime('%Y-%m-%d'),
            'quarter': f"Q{quarter}/{next_date.year}",
            'note': 'Rebalance ƒë·ªãnh k·ª≥'
        })
    
    print("\n" + "="*80)
    print(" "*27 + "üìÖ L·ªäCH REBALANCE ƒê·ªÄ XU·∫§T")
    print("="*80)
    print(f"\n{'Ng√†y':<15} {'Qu√Ω':<12} {'Ghi ch√∫'}")
    print("-"*80)
    
    for item in schedule:
        print(f"{item['date']:<15} {item['quarter']:<12} {item['note']}")
    
    print("\nüí° G·ª£i √Ω:")
    print(f"  ‚Ä¢ Rebalance m·ªói {months_interval} th√°ng")
    print("  ‚Ä¢ Ho·∫∑c khi drift > 5%")
    print("  ‚Ä¢ K·∫øt h·ª£p v·ªõi ƒë√≥ng g√≥p ƒë·ªãnh k·ª≥")


def compare_with_benchmark(portfolio_df, benchmark='SPY'):
    """So s√°nh v·ªõi benchmark"""
    
    if not YFINANCE_AVAILABLE:
        print("‚ö†Ô∏è C·∫ßn yfinance ƒë·ªÉ so s√°nh benchmark")
        return
    
    try:
        # T·∫£i d·ªØ li·ªáu benchmark
        bench_data = yf.download(benchmark, period='1y', progress=False)
        
        if bench_data.empty:
            print(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu {benchmark}")
            return
        
        # T√≠nh return
        bench_return = (bench_data['Adj Close'].iloc[-1] / bench_data['Adj Close'].iloc[0] - 1) * 100
        
        print("\n" + "="*80)
        print(" "*25 + "üìä SO S√ÅNH V·ªöI BENCHMARK")
        print("="*80)
        print(f"\nBenchmark: {benchmark}")
        print(f"Return 1 nƒÉm: {bench_return:.2f}%")
        print("\nüí° So s√°nh danh m·ª•c c·ªßa b·∫°n v·ªõi benchmark ƒë·ªÉ ƒë√°nh gi√° hi·ªáu su·∫•t")
    
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói so s√°nh benchmark: {e}")


def generate_rebalance_report(rebalancer):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    
    if rebalancer.rebalanced_portfolio is None:
        print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu rebalance!")
        return
    
    df = rebalancer.rebalanced_portfolio
    
    print("\n" + "="*80)
    print(" "*25 + "üìã B√ÅO C√ÅO C√ÇN B·∫∞NG DANH M·ª§C")
    print("="*80)
    
    print(f"\nüìÖ Ng√†y b√°o c√°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üí∞ T·ªïng gi√° tr·ªã: {df['value'].sum():,.0f} VNƒê")
    print(f"üíµ Ti·ªÅn m·ªõi: {rebalancer.new_money:,.0f} VNƒê")
    
    # T√≥m t·∫Øt theo asset class
    print("\n" + "-"*80)
    print("Ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n:")
    print("-"*80)
    
    asset_summary = df.groupby('asset_class').agg({
        'value': 'sum',
        'new_value': 'sum'
    })
    
    asset_summary['current_pct'] = asset_summary['value'] / asset_summary['value'].sum() * 100
    asset_summary['new_pct'] = asset_summary['new_value'] / asset_summary['new_value'].sum() * 100
    
    asset_names = rebalancer.asset_classes
    
    for asset_class, row in asset_summary.iterrows():
        name = asset_names.get(asset_class, asset_class)
        print(f"\n{name}:")
        print(f"  Hi·ªán t·∫°i: {row['current_pct']:.1f}%")
        print(f"  Sau rebalance: {row['new_pct']:.1f}%")
    
    # S·ªë l∆∞·ª£ng giao d·ªãch
    transactions = df[df['shares_change_rounded'] != 0]
    n_buy = len(transactions[transactions['shares_change_rounded'] > 0])
    n_sell = len(transactions[transactions['shares_change_rounded'] < 0])
    
    print("\n" + "-"*80)
    print(f"T·ªïng s·ªë giao d·ªãch: {len(transactions)}")
    print(f"  ‚Ä¢ L·ªánh mua: {n_buy}")
    print(f"  ‚Ä¢ L·ªánh b√°n: {n_sell}")
    
    # Drift l·ªõn nh·∫•t
    max_drift = df.loc[df['drift'].abs().idxmax()]
    print("\n" + "-"*80)
    print(f"Drift l·ªõn nh·∫•t: {max_drift['ticker']} ({max_drift['drift']*100:.2f}%)")
    
    print("\n" + "="*80)


def backtesting_rebalance(tickers, initial_weights, start_date, end_date, 
                         rebal_freq='Q'):
    """
    Backtest chi·∫øn l∆∞·ª£c rebalancing
    
    Parameters:
    - tickers: list of tickers
    - initial_weights: dict of weights
    - start_date, end_date: date strings
    - rebal_freq: 'M' (monthly), 'Q' (quarterly), 'Y' (yearly)
    """
    
    if not YFINANCE_AVAILABLE:
        print("‚ö†Ô∏è C·∫ßn yfinance ƒë·ªÉ backtest")
        return
    
    print("\n" + "="*80)
    print(" "*27 + "üî¨ BACKTEST REBALANCING")
    print("="*80)
    print(f"\nK·ª≥: {start_date} ƒë·∫øn {end_date}")
    print(f"T·∫ßn su·∫•t: {rebal_freq}")
    
    try:
        # T·∫£i d·ªØ li·ªáu
        data = yf.download(tickers, start=start_date, end=end_date, progress=False)['Adj Close']
        
        if isinstance(data, pd.Series):
            data = data.to_frame()
        
        # T√≠nh return
        returns = data.pct_change().dropna()
        
        # Strategy 1: Buy & Hold
        bh_value = 100  # Start with 100
        weights = pd.Series(initial_weights)
        
        for date, ret in returns.iterrows():
            bh_value *= (1 + (ret * weights).sum())
        
        # Strategy 2: Rebalancing
        rebal_value = 100
        current_weights = weights.copy()
        
        # T·∫°o dates cho rebalancing
        if rebal_freq == 'Q':
            rebal_dates = pd.date_range(start=start_date, end=end_date, freq='QS')
        elif rebal_freq == 'M':
            rebal_dates = pd.date_range(start=start_date, end=end_date, freq='MS')
        else:  # Y
            rebal_dates = pd.date_range(start=start_date, end=end_date, freq='YS')
        
        for date, ret in returns.iterrows():
            # Apply returns
            port_return = (ret * current_weights).sum()
            rebal_value *= (1 + port_return)
            
            # Update weights
            current_weights *= (1 + ret)
            current_weights /= current_weights.sum()
            
            # Rebalance if needed
            if date in rebal_dates:
                current_weights = weights.copy()
        
        # K·∫øt qu·∫£
        print(f"\nüìà K·∫øt qu·∫£:")
        print(f"  Buy & Hold: {(bh_value - 100):.2f}%")
        print(f"  Rebalancing: {(rebal_value - 100):.2f}%")
        print(f"  Outperformance: {(rebal_value - bh_value):.2f}%")
        
        if rebal_value > bh_value:
            print(f"\n‚úÖ Rebalancing t·ªët h∆°n Buy & Hold!")
        else:
            print(f"\n‚ö†Ô∏è Buy & Hold t·ªët h∆°n trong k·ª≥ n√†y")
    
    except Exception as e:
        print(f"‚ùå L·ªói backtest: {e}")


# ==================== CLI MODE (Kh√¥ng c·∫ßn widgets) ====================

def run_cli_mode():
    """Ch·∫°y ·ªü ch·∫ø ƒë·ªô CLI (kh√¥ng GUI)"""
    
    print("\nüñ•Ô∏è  Ch·∫ø ƒë·ªô CLI (Command Line Interface)")
    print("="*80)
    
    # T·∫°o sample data
    print("\nüìä S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...")
    current, target = create_sample_portfolio()
    
    print("\n1Ô∏è‚É£ Danh m·ª•c hi·ªán t·∫°i:")
    print(current.to_string(index=False))
    
    print("\n2Ô∏è‚É£ Ph√¢n b·ªï m·ª•c ti√™u:")
    print(target.to_string(index=False))
    
    # T·∫°o rebalancer
    rebalancer = PortfolioRebalancer()
    rebalancer.current_portfolio = current
    rebalancer.target_allocation = target
    rebalancer.new_money = 10_000_000
    rebalancer.rebal_threshold = 0.05
    
    print("\n3Ô∏è‚É£ ƒêang l·∫•y gi√°...")
    
    all_tickers = list(set(current['ticker'].tolist() + target['ticker'].tolist()))
    prices = rebalancer.get_latest_prices(all_tickers)
    
    if prices.empty:
        print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°!")
        return
    
    print(f"‚úÖ ƒê√£ l·∫•y gi√° {len(prices)} qu·ªπ")
    
    # Aggregate v√† t√≠nh to√°n (gi·ªëng run_rebalance)
    current_agg = current.groupby('ticker').agg({
        'shares': 'sum',
        'cost_basis': 'mean',
        'asset_class': 'first',
        'last_rebal_date': 'max'
    }).reset_index()
    
    current_agg['last_rebal_date'] = pd.to_datetime(current_agg['last_rebal_date'])
    
    portfolio = current_agg.merge(target[['ticker', 'allocation_target']], 
                                 on='ticker', how='outer')
    portfolio = portfolio.merge(prices.to_frame('close'), 
                               left_on='ticker', right_index=True, how='left')
    
    portfolio['shares'] = portfolio['shares'].fillna(0)
    portfolio['allocation_target'] = portfolio['allocation_target'].fillna(0)
    portfolio['cost_basis'] = portfolio['cost_basis'].fillna(portfolio['close'])
    
    portfolio['value'] = portfolio['shares'] * portfolio['close']
    total_value = portfolio['value'].sum()
    portfolio['allocation_current'] = portfolio['value'] / total_value
    
    portfolio['drift'] = portfolio['allocation_target'] - portfolio['allocation_current']
    
    today = pd.to_datetime(datetime.now().strftime('%Y-%m-%d'))
    portfolio['days_since_rebal'] = (today - portfolio['last_rebal_date']).dt.days
    portfolio['days_since_rebal'] = portfolio['days_since_rebal'].fillna(999)
    
    portfolio['needs_rebal'] = (np.abs(portfolio['drift']) > rebalancer.rebal_threshold)
    
    total_value_new = total_value + rebalancer.new_money
    portfolio['target_value'] = portfolio['allocation_target'] * total_value_new
    portfolio['value_change'] = portfolio['target_value'] - portfolio['value']
    portfolio['shares_change'] = portfolio['value_change'] / portfolio['close']
    portfolio['shares_change_rounded'] = portfolio['shares_change'].round(0)
    portfolio['new_shares'] = portfolio['shares'] + portfolio['shares_change_rounded']
    portfolio['new_value'] = portfolio['new_shares'] * portfolio['close']
    portfolio['new_allocation'] = portfolio['new_value'] / portfolio['new_value'].sum()
    
    rebalancer.rebalanced_portfolio = portfolio
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("\n4Ô∏è‚É£ K·∫øt qu·∫£ ph√¢n t√≠ch:")
    print("="*80)
    
    print(f"\nüí∞ T·ªïng gi√° tr·ªã: {total_value:,.0f} VNƒê")
    print(f"üíµ Ti·ªÅn m·ªõi: {rebalancer.new_money:,.0f} VNƒê")
    print(f"üíé T·ªïng m·ªõi: {portfolio['new_value'].sum():,.0f} VNƒê")
    
    # B·∫£ng t√≥m t·∫Øt
    summary = portfolio[['ticker', 'allocation_current', 'allocation_target', 
                        'drift', 'shares_change_rounded']].copy()
    summary['allocation_current'] = (summary['allocation_current'] * 100).round(1)
    summary['allocation_target'] = (summary['allocation_target'] * 100).round(1)
    summary['drift'] = (summary['drift'] * 100).round(1)
    summary.columns = ['Ticker', 'Hi·ªán t·∫°i%', 'M·ª•c ti√™u%', 'L·ªách%', 'SL thay ƒë·ªïi']
    
    print("\n" + summary.to_string(index=False))
    
    # Giao d·ªãch
    transactions = portfolio[portfolio['shares_change_rounded'] != 0]
    
    if len(transactions) > 0:
        print(f"\n5Ô∏è‚É£ C·∫ßn th·ª±c hi·ªán {len(transactions)} giao d·ªãch:")
        
        for _, row in transactions.iterrows():
            action = "MUA" if row['shares_change_rounded'] > 0 else "B√ÅN"
            amount = abs(row['shares_change_rounded'])
            value = amount * row['close']
            print(f"  {action} {int(amount)} {row['ticker']} = {value:,.0f} VNƒê")
    else:
        print("\n5Ô∏è‚É£ ‚úÖ Kh√¥ng c·∫ßn giao d·ªãch!")
    
    print("\n" + "="*80)
    print("‚úÖ Ho√†n t·∫•t!")


# ==================== MAIN ====================

if __name__ == "__main__":
    if WIDGETS_AVAILABLE:
        main()
    else:
        print("\n‚ö†Ô∏è ipywidgets kh√¥ng c√≥, ch·∫°y ·ªü ch·∫ø ƒë·ªô CLI...")
        run_cli_mode()
else:
    # Jupyter notebook
    try:
        if WIDGETS_AVAILABLE:
            app = PortfolioRebalancer()
            app.display()
        else:
            run_cli_mode()
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        print("\nüí° H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t:")
        print("  pip install pandas numpy matplotlib seaborn")
        print("  pip install ipywidgets")
        print("  pip install yfinance")
        print("  pip install vnstock3  # T√πy ch·ªçn")
